{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 9,
    "pending": 0,
    "failures": 2,
    "start": "2024-07-11T16:41:59.613Z",
    "end": "2024-07-11T16:41:59.791Z",
    "duration": 178,
    "testsRegistered": 11,
    "passPercent": 81.81818181818183,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1521a695-8dec-4c79-92ed-12bdd87447cf",
      "title": "",
      "fullFile": "C:\\Users\\S0nd0\\Downloads\\API\\test\\api.test.js",
      "file": "\\test\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
          "title": "API Tests",
          "fullFile": "C:\\Users\\S0nd0\\Downloads\\API\\test\\api.test.js",
          "file": "\\test\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user",
              "fullTitle": "API Tests should register a new user",
              "timedOut": false,
              "duration": 70,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post('/api/v1/users')\n  .send({ name: 'user', email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    \n    console.log(res.body); // Log the response body to debug\n    authToken = res.body.token; // Save the token to authToken\n    assert.ok(authToken); // Ensure token is returned\n    // Ensure response contains message and the correct message value\n    assert.ok(res.body.message);\n    assert.strictEqual(res.body.message, 'User registered with success');\n    done();\n    \n  });",
              "err": {
                "message": "AssertionError: The expression evaluated to a falsy value:\n\n  assert.ok(authToken)\n",
                "estack": "AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  assert.ok(authToken)\n\n    at Test.<anonymous> (test\\api.test.js:22:16)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:633:28)\n    at Server.emit (node:events:519:28)\n    at emitCloseNT (node:net:2321:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                "diff": null
              },
              "uuid": "15ea7250-0af7-410a-894b-8b0a3c91f932",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should register a duplicated new user",
              "fullTitle": "API Tests should register a duplicated new user",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n.post('/api/v1/users')\n.send({ name: 'user', email: 'user@gmail.com', password: 'user123' })\n.expect(401) // Expecting error code\n.expect('Content-Type', /json/)\n.end((err, res) => {\n  if (err) return done(err);\n  console.log(res.body); // Log the response body to debug\n  assert.ok(res.body.message); \n  assert.strictEqual(res.body.message, 'User already registered');\n  done();\n});",
              "err": {},
              "uuid": "ce9104ab-a0ad-4b74-af48-cfff4f75e722",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate user and return access token",
              "fullTitle": "API Tests should authenticate user and return access token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post('/api/v1/auth')\n  .send({ email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.ok(res.body.token); // Ensure token is returned\n    authToken = res.body.token; // Save token for future authenticated requests\n    done();\n  });",
              "err": {},
              "uuid": "a108ff3a-9409-431e-ba2f-de58212384b0",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not authenticate user with invalid credentials and return an error",
              "fullTitle": "API Tests should not authenticate user with invalid credentials and return an error",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .post('/api/v1/auth')\n  .send({ email: 'invaliduser@gmail.com', password: 'wrongpassword' })\n  .expect(401) // Expecting a 401 Unauthorized status code\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.ok(res.body.message); // Ensure error message is returned\n    assert.strictEqual(res.body.message, 'Incorrect email or password');\n    done();\n  });",
              "err": {},
              "uuid": "fb2f187a-1191-46b4-873c-11d39fb0efce",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user details with valid token",
              "fullTitle": "API Tests should get user details with valid token",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .get('/api/v1/users')\n  .set('Authorization', authToken)\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.name, 'user');\n    assert.strictEqual(res.body.email, 'user@gmail.com');\n    assert.strictEqual(res.body.password, 'user123');\n    done();\n  });",
              "err": {},
              "uuid": "96db73a9-5f86-47dc-8bf1-b6942fc4e70b",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get user details with invalid token",
              "fullTitle": "API Tests should not get user details with invalid token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .get('/api/v1/users')\n  .set('Authorization', 'InvalidToken')\n  .expect(403) \n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.ok(res.body.message); // Ensure error message is returned\n    assert.strictEqual(res.body.message, 'Unauthorized');\n    done();\n  });",
              "err": {},
              "uuid": "00fa44dc-f71d-48fb-9ec6-1ad4642583f4",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user details with valid token",
              "fullTitle": "API Tests should update user details with valid token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .patch('/api/v1/users')\n  .set('Authorization', authToken)\n  .send({ name: 'newName', email: 'new_email@gmail.com', password: 'newpassword123' })\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.message, 'User updated with success!');\n    done();\n  });",
              "err": {},
              "uuid": "fef7ad7e-26c1-42f5-b1e8-4137023320a9",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user details with invalid token",
              "fullTitle": "API Tests should not update user details with invalid token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .patch('/api/v1/users')\n  .set('Authorization', 'InvalidToken')\n  .send({ name: 'newName', email: 'new_email@gmail.com', password: 'newpassword123' })\n  .expect(403)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.ok(res.body.message); // Ensure error message is returned\n    assert.strictEqual(res.body.message, 'jwt malformed');\n    done();\n  });",
              "err": {},
              "uuid": "796472ef-7181-4f8d-98ee-b3db039a5b99",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user with valid token",
              "fullTitle": "API Tests should delete user with valid token",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .delete('/api/v1/users')\n  .set('Authorization', authToken)\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.message, 'User deleted with success');\n    done();\n  });",
              "err": {
                "message": "Error: expected 200 \"OK\", got 403 \"Forbidden\"",
                "estack": "Error: expected 200 \"OK\", got 403 \"Forbidden\"\n    at Context.<anonymous> (test\\api.test.js:178:8)\n    at process.processImmediate (node:internal/timers:478:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\S0nd0\\Downloads\\API\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at Object.onceWrapper (node:events:633:28)\n    at Server.emit (node:events:519:28)\n    at emitCloseNT (node:net:2321:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                "diff": null
              },
              "uuid": "840f908a-0956-4999-9bfb-e7ea2908480b",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete all users with admin key",
              "fullTitle": "API Tests should delete all users with admin key",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'keyadmin123' })\n  .expect(200)\n  .expect('Content-Type', /json/)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.message, 'Users deleted with success');\n    done();\n  });",
              "err": {},
              "uuid": "f6bf5e0a-7cc3-44a1-a632-faf1da72351c",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 for unauthorized access to /all-users",
              "fullTitle": "API Tests should return 403 for unauthorized access to /all-users",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(app)\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'dg' })\n  .expect(403)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.message, 'Unauthorized access');\n    done();\n  });",
              "err": {},
              "uuid": "7bcd43c0-2e25-47c1-b673-769ce3a29307",
              "parentUUID": "081ba9ca-c64e-4b49-ab84-1ae49e78bd3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce9104ab-a0ad-4b74-af48-cfff4f75e722",
            "a108ff3a-9409-431e-ba2f-de58212384b0",
            "fb2f187a-1191-46b4-873c-11d39fb0efce",
            "96db73a9-5f86-47dc-8bf1-b6942fc4e70b",
            "00fa44dc-f71d-48fb-9ec6-1ad4642583f4",
            "fef7ad7e-26c1-42f5-b1e8-4137023320a9",
            "796472ef-7181-4f8d-98ee-b3db039a5b99",
            "f6bf5e0a-7cc3-44a1-a632-faf1da72351c",
            "7bcd43c0-2e25-47c1-b673-769ce3a29307"
          ],
          "failures": [
            "15ea7250-0af7-410a-894b-8b0a3c91f932",
            "840f908a-0956-4999-9bfb-e7ea2908480b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}